런타임은 실행하는 순간 바로 실행된다(따로 컴파일한 후 실행하는 것이 아님)

자바스크립트는 바로바로 한줄씩 실행하는 언어

asynchronous 비동기 (콜백) 논블럭킹

설거지가 끝나고 전화를 받는것은 블럭킹(설거지가)

설거지하며 전화를 받는것이 논블럭킹

웹서버 자체를 NodeJs가 가볍고 빠른 웹서버로 구성해주기 때문에 빠르다

highly scalable 높은 확장성

thread는 무한 loop을 많이 쓰기 때문에 while을 주로 쓸것이다

thread는 무한으로 돌고 있고 event가 발생해야 그거에 대한 처리를 한다

event driven

chunk : 버퍼가 아닌 데이터 덩어리

??요청하게 하는 콜백함수를 던져놓고??

싱글스레드 방식이지만 이벤트라는 스레드를 동시에 쓰고 있는거야

이벤트는 시스템 디펜던시기 때문에 스레드라고 안하고 이벤트라고만 한다

onclick은 크롬이 처리할테니 걱정말라구

처리를 메모리에서 저장하고 있는게 아니라 cpu에 던지기 때문에 메모리가 효율적이다

데이터를 stream에 보내주는것이 streaming

유튜브에 올라간 동영상이 데이터 스트림을 통해 유튜브에 올라가

서버의 데이터를 클라이언트에 물흐르듯이 보내준다 stream ex) ftp, 이미지클릭시 팝업

아이디를 ...net에 연결해준게 domain

Domain Name Service DNS

클러스트 우리 서버가 병목 안되려면 user 접속을 분산처리 해줘야된다

여러 웹서버(또는 DB)중 하나가 죽어도 무중단 서비스 가능

DIRT 데이터가 백엔드로 왔다갔다

JSON은 key : value로 되있다


링크에서 setup

공백에서 shift 오른쪽클릭 powershell

nvm install lts

nvm ls로 확인

윈도우 오른쪽버튼 powershell 관리자

nvm use 16.13.0

node 설치는 관리자 모드에서 하지말고 탐색기에서 line 54 따라서

nvm은 관리자에서 설치된것임
 node권한 설정(nvm use)은 관리자에서

 npm version
 npm -v 
 node -v

NPM(node package manager)

구축(integration)이 아니라 생성한다

서버는 client의 요청을 받기위해 계속 listen하고 있어야한다

web server의 기본포트는 80

클라이언트는 80포트 지정 안해줘도 됨

인스턴스는 object가 메모리에 실체화 된것 (instantiating)

인스턴스는 서버 메모리에서 실행이 되고 있다

listen method 8081포트로 listen중

비동기라 바로 실행된다

프로그래머스 들어가서 코딩 테스트 준비하기